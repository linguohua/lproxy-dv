// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `bw_report.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct BandwidthStatistics {
    // message fields
    pub statistics: ::protobuf::RepeatedField<BandwidthUsage>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BandwidthStatistics {
    fn default() -> &'a BandwidthStatistics {
        <BandwidthStatistics as ::protobuf::Message>::default_instance()
    }
}

impl BandwidthStatistics {
    pub fn new() -> BandwidthStatistics {
        ::std::default::Default::default()
    }

    // repeated .BandwidthUsage statistics = 1;


    pub fn get_statistics(&self) -> &[BandwidthUsage] {
        &self.statistics
    }
    pub fn clear_statistics(&mut self) {
        self.statistics.clear();
    }

    // Param is passed by value, moved
    pub fn set_statistics(&mut self, v: ::protobuf::RepeatedField<BandwidthUsage>) {
        self.statistics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_statistics(&mut self) -> &mut ::protobuf::RepeatedField<BandwidthUsage> {
        &mut self.statistics
    }

    // Take field
    pub fn take_statistics(&mut self) -> ::protobuf::RepeatedField<BandwidthUsage> {
        ::std::mem::replace(&mut self.statistics, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BandwidthStatistics {
    fn is_initialized(&self) -> bool {
        for v in &self.statistics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.statistics)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.statistics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.statistics {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BandwidthStatistics {
        BandwidthStatistics::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BandwidthUsage>>(
                    "statistics",
                    |m: &BandwidthStatistics| { &m.statistics },
                    |m: &mut BandwidthStatistics| { &mut m.statistics },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BandwidthStatistics>(
                    "BandwidthStatistics",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BandwidthStatistics {
        static mut instance: ::protobuf::lazy::Lazy<BandwidthStatistics> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BandwidthStatistics,
        };
        unsafe {
            instance.get(BandwidthStatistics::new)
        }
    }
}

impl ::protobuf::Clear for BandwidthStatistics {
    fn clear(&mut self) {
        self.statistics.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BandwidthStatistics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BandwidthStatistics {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BandwidthUsage {
    // message fields
    pub uuid: ::std::string::String,
    pub send_bytes: u64,
    pub recv_bytes: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BandwidthUsage {
    fn default() -> &'a BandwidthUsage {
        <BandwidthUsage as ::protobuf::Message>::default_instance()
    }
}

impl BandwidthUsage {
    pub fn new() -> BandwidthUsage {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // uint64 send_bytes = 2;


    pub fn get_send_bytes(&self) -> u64 {
        self.send_bytes
    }
    pub fn clear_send_bytes(&mut self) {
        self.send_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_send_bytes(&mut self, v: u64) {
        self.send_bytes = v;
    }

    // uint64 recv_bytes = 3;


    pub fn get_recv_bytes(&self) -> u64 {
        self.recv_bytes
    }
    pub fn clear_recv_bytes(&mut self) {
        self.recv_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_recv_bytes(&mut self, v: u64) {
        self.recv_bytes = v;
    }
}

impl ::protobuf::Message for BandwidthUsage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.send_bytes = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.recv_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if self.send_bytes != 0 {
            my_size += ::protobuf::rt::value_size(2, self.send_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.recv_bytes != 0 {
            my_size += ::protobuf::rt::value_size(3, self.recv_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if self.send_bytes != 0 {
            os.write_uint64(2, self.send_bytes)?;
        }
        if self.recv_bytes != 0 {
            os.write_uint64(3, self.recv_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BandwidthUsage {
        BandwidthUsage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uuid",
                    |m: &BandwidthUsage| { &m.uuid },
                    |m: &mut BandwidthUsage| { &mut m.uuid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "send_bytes",
                    |m: &BandwidthUsage| { &m.send_bytes },
                    |m: &mut BandwidthUsage| { &mut m.send_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "recv_bytes",
                    |m: &BandwidthUsage| { &m.recv_bytes },
                    |m: &mut BandwidthUsage| { &mut m.recv_bytes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BandwidthUsage>(
                    "BandwidthUsage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BandwidthUsage {
        static mut instance: ::protobuf::lazy::Lazy<BandwidthUsage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BandwidthUsage,
        };
        unsafe {
            instance.get(BandwidthUsage::new)
        }
    }
}

impl ::protobuf::Clear for BandwidthUsage {
    fn clear(&mut self) {
        self.uuid.clear();
        self.send_bytes = 0;
        self.recv_bytes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BandwidthUsage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BandwidthUsage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportResult {
    // message fields
    pub code: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportResult {
    fn default() -> &'a ReportResult {
        <ReportResult as ::protobuf::Message>::default_instance()
    }
}

impl ReportResult {
    pub fn new() -> ReportResult {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }
}

impl ::protobuf::Message for ReportResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportResult {
        ReportResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "code",
                    |m: &ReportResult| { &m.code },
                    |m: &mut ReportResult| { &mut m.code },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReportResult>(
                    "ReportResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReportResult {
        static mut instance: ::protobuf::lazy::Lazy<ReportResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReportResult,
        };
        unsafe {
            instance.get(ReportResult::new)
        }
    }
}

impl ::protobuf::Clear for ReportResult {
    fn clear(&mut self) {
        self.code = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fbw_report.proto\"F\n\x13BandwidthStatistics\x12/\n\nstatistics\x18\
    \x01\x20\x03(\x0b2\x0f.BandwidthUsageR\nstatistics\"b\n\x0eBandwidthUsag\
    e\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\x12\x1d\n\nsend_bytes\
    \x18\x02\x20\x01(\x04R\tsendBytes\x12\x1d\n\nrecv_bytes\x18\x03\x20\x01(\
    \x04R\trecvBytes\"\"\n\x0cReportResult\x12\x12\n\x04code\x18\x01\x20\x01\
    (\x05R\x04code2B\n\x0fBandwidthReport\x12/\n\x06Report\x12\x14.Bandwidth\
    Statistics\x1a\r.ReportResult\"\0J\x86\x04\n\x06\x12\x04\0\0\x12\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x06\0\x12\x04\x02\0\x04\x01\n\n\
    \n\x03\x06\0\x01\x12\x03\x02\x08\x17\n\x0b\n\x04\x06\0\x02\0\x12\x03\x03\
    \x04=\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x03\x08\x0e\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x03\x0f\"\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x03-9\n\
    \n\n\x02\x04\0\x12\x04\x06\0\x08\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\
    \x1b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x04+\n\x0c\n\x05\x04\0\x02\0\
    \x04\x12\x03\x07\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x07\r\x1b\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x1c&\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x07)*\n\n\n\x02\x04\x01\x12\x04\n\0\x0e\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\n\x08\x16\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0b\x04\x14\n\r\
    \n\x05\x04\x01\x02\0\x04\x12\x04\x0b\x04\n\x18\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b\x0b\x0f\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0b\x12\x13\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x0c\x04\x1a\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x0c\
    \x04\x0b\x14\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0c\x04\n\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x0c\x0b\x15\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x0c\x18\x19\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\r\x04\x1a\n\
    \r\n\x05\x04\x01\x02\x02\x04\x12\x04\r\x04\x0c\x1a\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\r\
    \x0b\x15\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\r\x18\x19\n\n\n\x02\x04\
    \x02\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x02\x01\x12\x03\x10\x08\x14\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x11\x04\x13\n\r\n\x05\x04\x02\x02\0\x04\
    \x12\x04\x11\x04\x10\x16\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x11\x04\t\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x11\n\x0e\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03\x11\x11\x12b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
