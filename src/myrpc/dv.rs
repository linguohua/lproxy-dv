// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `dv.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Empty {
    fn default() -> &'a Empty {
        <Empty as ::protobuf::Message>::default_instance()
    }
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Empty>(
                    "Empty",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Empty {
        static mut instance: ::protobuf::lazy::Lazy<Empty> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Empty::new)
        }
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Kickout {
    // message fields
    pub uuid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Kickout {
    fn default() -> &'a Kickout {
        <Kickout as ::protobuf::Message>::default_instance()
    }
}

impl Kickout {
    pub fn new() -> Kickout {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Kickout {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Kickout {
        Kickout::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uuid",
                    |m: &Kickout| { &m.uuid },
                    |m: &mut Kickout| { &mut m.uuid },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Kickout>(
                    "Kickout",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Kickout {
        static mut instance: ::protobuf::lazy::Lazy<Kickout> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Kickout::new)
        }
    }
}

impl ::protobuf::Clear for Kickout {
    fn clear(&mut self) {
        self.uuid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Kickout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Kickout {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CfgChangeNotify {
    // message fields
    pub uuid: ::std::string::String,
    pub kb_per_second: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CfgChangeNotify {
    fn default() -> &'a CfgChangeNotify {
        <CfgChangeNotify as ::protobuf::Message>::default_instance()
    }
}

impl CfgChangeNotify {
    pub fn new() -> CfgChangeNotify {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // uint64 kb_per_second = 2;


    pub fn get_kb_per_second(&self) -> u64 {
        self.kb_per_second
    }
    pub fn clear_kb_per_second(&mut self) {
        self.kb_per_second = 0;
    }

    // Param is passed by value, moved
    pub fn set_kb_per_second(&mut self, v: u64) {
        self.kb_per_second = v;
    }
}

impl ::protobuf::Message for CfgChangeNotify {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.kb_per_second = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if self.kb_per_second != 0 {
            my_size += ::protobuf::rt::value_size(2, self.kb_per_second, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if self.kb_per_second != 0 {
            os.write_uint64(2, self.kb_per_second)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CfgChangeNotify {
        CfgChangeNotify::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uuid",
                    |m: &CfgChangeNotify| { &m.uuid },
                    |m: &mut CfgChangeNotify| { &mut m.uuid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "kb_per_second",
                    |m: &CfgChangeNotify| { &m.kb_per_second },
                    |m: &mut CfgChangeNotify| { &mut m.kb_per_second },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CfgChangeNotify>(
                    "CfgChangeNotify",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CfgChangeNotify {
        static mut instance: ::protobuf::lazy::Lazy<CfgChangeNotify> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CfgChangeNotify::new)
        }
    }
}

impl ::protobuf::Clear for CfgChangeNotify {
    fn clear(&mut self) {
        self.uuid.clear();
        self.kb_per_second = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CfgChangeNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CfgChangeNotify {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x08dv.proto\"\x07\n\x05Empty\"\x1d\n\x07Kickout\x12\x12\n\x04uuid\x18\
    \x01\x20\x01(\tR\x04uuid\"I\n\x0fCfgChangeNotify\x12\x12\n\x04uuid\x18\
    \x01\x20\x01(\tR\x04uuid\x12\"\n\rkb_per_second\x18\x02\x20\x01(\x04R\
    \x0bkbPerSecond2[\n\x08DvExport\x12!\n\x0bKickoutUuid\x12\x08.Kickout\
    \x1a\x06.Empty\"\0\x12,\n\x0eUuidCfgChanged\x12\x10.CfgChangeNotify\x1a\
    \x06.Empty\"\0J\xd9\x05\n\x06\x12\x04\0\0\x18\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\xff\x01\n\x02\x06\0\x12\x04\x07\0\n\x012\xf2\x01\x20proto\
    c\x20--rust_out=.\x20--grpc_out=.\x20--plugin=protoc-gen-grpc=`which\x20\
    grpc_rust_plugin`\x20dv.proto\n\x20if\x20protobuffer\x20tool\x20version\
    \x20not\x20match\x20with\x20newest\x20protobuf\x20rust\x20lib,\x20need\
    \x20to\x20update:\n\x20cargo\x20install\x20protobuf-codegen\n\x20cargo\
    \x20install\x20grpcio-compiler\n\n\n\n\x03\x06\0\x01\x12\x03\x07\x08\x10\
    \n\x0b\n\x04\x06\0\x02\0\x12\x03\x08\x04/\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x03\x08\x08\x13\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x08\x14\x1b\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03\x08&+\n\x0b\n\x04\x06\0\x02\x01\x12\
    \x03\t\x04:\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\t\x08\x16\n\x0c\n\x05\
    \x06\0\x02\x01\x02\x12\x03\t\x17&\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\
    \t16\n\t\n\x02\x04\0\x12\x03\x0c\0\x10\n\n\n\x03\x04\0\x01\x12\x03\x0c\
    \x08\r\n\n\n\x02\x04\x01\x12\x04\x0e\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x0e\x08\x0f\n)\n\x04\x04\x01\x02\0\x12\x03\x10\x04\x14\x1a\x1c\x20w\
    hich\x20device\x20to\x20be\x20kickout\n\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\x10\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x10\x0b\x0f\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10\x12\x13\n\n\n\x02\x04\x02\x12\
    \x04\x13\0\x18\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\x08\x17\n-\n\x04\
    \x04\x02\x02\0\x12\x03\x15\x04\x14\x1a\x20\x20which\x20device's\x20cfg\
    \x20has\x20changed\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x15\x04\n\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x15\x0b\x0f\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03\x15\x12\x13\n*\n\x04\x04\x02\x02\x01\x12\x03\x17\x04\x1d\
    \x1a\x1d\x20the\x20bandwidth\x20limit\x20changed\n\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03\x17\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\
    \x17\x0b\x18\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x17\x1b\x1cb\x06pro\
    to3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
